!
function(root, factory) {
    "use strict";
    "function" == typeof define && define.amd ? define(factory) : root.simpleStorage = factory()
} (this,
function() {
    "use strict";
    function _init() {
        window.localStorage.setItem("__simpleStorageInitTest", "tmpval"),
        window.localStorage.removeItem("__simpleStorageInitTest"),
        _load_storage(),
        _handleTTL(),
        _setupUpdateObserver(),
        "addEventListener" in window && window.addEventListener("pageshow",
        function(event) {
            event.persisted && _reloadData()
        },
        !1),
        _storage_available = !0
    }
    function _setupUpdateObserver() {
        "addEventListener" in window ? window.addEventListener("storage", _reloadData, !1) : document.attachEvent("onstorage", _reloadData)
    }
    function _reloadData() {
        try {
            _load_storage()
        } catch(E) {
            return void(_storage_available = !1)
        }
        _handleTTL()
    }
    function _load_storage() {
        var source = localStorage.getItem("simpleStorage");
        try {
            _storage = JSON.parse(source) || {}
        } catch(E) {
            _storage = {}
        }
        _storage_size = _get_storage_size()
    }
    function _save() {
        try {
            localStorage.setItem("simpleStorage", JSON.stringify(_storage)),
            _storage_size = _get_storage_size()
        } catch(E) {
            return E
        }
        return ! 0
    }
    function _get_storage_size() {
        var source = localStorage.getItem("simpleStorage");
        return source ? String(source).length: 0
    }
    function _handleTTL() {
        var curtime, i, len, expire, keys, nextExpire = 1 / 0,
        expiredKeysCount = 0;
        if (clearTimeout(_ttl_timeout), _storage && _storage.__simpleStorage_meta && _storage.__simpleStorage_meta.TTL) {
            for (curtime = +new Date, keys = _storage.__simpleStorage_meta.TTL.keys || [], expire = _storage.__simpleStorage_meta.TTL.expire || {},
            i = 0, len = keys.length; len > i; i++) {
                if (! (expire[keys[i]] <= curtime)) {
                    expire[keys[i]] < nextExpire && (nextExpire = expire[keys[i]]);
                    break
                }
                expiredKeysCount++,
                delete _storage[keys[i]],
                delete expire[keys[i]]
            }
            nextExpire != 1 / 0 && (_ttl_timeout = setTimeout(_handleTTL, Math.min(nextExpire - curtime, 2147483647))),
            expiredKeysCount && (keys.splice(0, expiredKeysCount), _cleanMetaObject(), _save())
        }
    }
    function _setTTL(key, ttl) {
        var i, len, curtime = +new Date,
        added = !1;
        if (ttl = Number(ttl) || 0, 0 !== ttl) {
            if (!_storage.hasOwnProperty(key)) return ! 1;
            if (_storage.__simpleStorage_meta || (_storage.__simpleStorage_meta = {}), _storage.__simpleStorage_meta.TTL || (_storage.__simpleStorage_meta.TTL = {
                expire: {},
                keys: []
            }), _storage.__simpleStorage_meta.TTL.expire[key] = curtime + ttl, _storage.__simpleStorage_meta.TTL.expire.hasOwnProperty(key)) for (i = 0, len = _storage.__simpleStorage_meta.TTL.keys.length; len > i; i++) _storage.__simpleStorage_meta.TTL.keys[i] == key && _storage.__simpleStorage_meta.TTL.keys.splice(i);
            for (i = 0, len = _storage.__simpleStorage_meta.TTL.keys.length; len > i; i++) if (_storage.__simpleStorage_meta.TTL.expire[_storage.__simpleStorage_meta.TTL.keys[i]] > curtime + ttl) {
                _storage.__simpleStorage_meta.TTL.keys.splice(i, 0, key),
                added = !0;
                break
            }
            added || _storage.__simpleStorage_meta.TTL.keys.push(key)
        } else if (_storage && _storage.__simpleStorage_meta && _storage.__simpleStorage_meta.TTL) {
            if (_storage.__simpleStorage_meta.TTL.expire.hasOwnProperty(key)) for (delete _storage.__simpleStorage_meta.TTL.expire[key], i = 0, len = _storage.__simpleStorage_meta.TTL.keys.length; len > i; i++) if (_storage.__simpleStorage_meta.TTL.keys[i] == key) {
                _storage.__simpleStorage_meta.TTL.keys.splice(i, 1);
                break
            }
            _cleanMetaObject()
        }
        return clearTimeout(_ttl_timeout),
        _storage && _storage.__simpleStorage_meta && _storage.__simpleStorage_meta.TTL && _storage.__simpleStorage_meta.TTL.keys.length && (_ttl_timeout = setTimeout(_handleTTL, Math.min(Math.max(_storage.__simpleStorage_meta.TTL.expire[_storage.__simpleStorage_meta.TTL.keys[0]] - curtime, 0), 2147483647))),
        !0
    }
    function _cleanMetaObject() {
        var i, updated = !1,
        hasProperties = !1;
        if (!_storage || !_storage.__simpleStorage_meta) return updated;
        _storage.__simpleStorage_meta.TTL && !_storage.__simpleStorage_meta.TTL.keys.length && (delete _storage.__simpleStorage_meta.TTL, updated = !0);
        for (i in _storage.__simpleStorage_meta) if (_storage.__simpleStorage_meta.hasOwnProperty(i)) {
            hasProperties = !0;
            break
        }
        return hasProperties || (delete _storage.__simpleStorage_meta, updated = !0),
        updated
    }
    var VERSION = "0.1.3",
    _storage = !1,
    _storage_size = 0,
    _storage_available = !1,
    _ttl_timeout = null;
    try {
        _init()
    } catch(E) {}
    return {
        version: VERSION,
        canUse: function() {
            return !! _storage_available
        },
        set: function(key, value, options) {
            if ("__simpleStorage_meta" == key) return ! 1;
            if (!_storage) return ! 1;
            if ("undefined" == typeof value) return this.deleteKey(key);
            options = options || {};
            try {
                value = JSON.parse(JSON.stringify(value))
            } catch(E) {
                return E
            }
            return _storage[key] = value,
            _setTTL(key, options.TTL || 0),
            _save()
        },
        get: function(key) {
            return _storage ? _storage.hasOwnProperty(key) && "__simpleStorage_meta" != key && this.getTTL(key) ? _storage[key] : void 0 : !1
        },
        deleteKey: function(key) {
            return _storage && key in _storage ? (delete _storage[key], _setTTL(key, 0), _save()) : !1
        },
        setTTL: function(key, ttl) {
            return _storage ? (_setTTL(key, ttl), _save()) : !1
        },
        getTTL: function(key) {
            var ttl;
            return _storage && _storage.hasOwnProperty(key) ? _storage.__simpleStorage_meta && _storage.__simpleStorage_meta.TTL && _storage.__simpleStorage_meta.TTL.expire && _storage.__simpleStorage_meta.TTL.expire.hasOwnProperty(key) ? (ttl = Math.max(_storage.__simpleStorage_meta.TTL.expire[key] - +new Date || 0, 0), ttl || !1) : 1 / 0 : !1
        },
        flush: function() {
            if (!_storage) return ! 1;
            _storage = {};
            try {
                return localStorage.removeItem("simpleStorage"),
                !0
            } catch(E) {
                return E
            }
        },
        index: function() {
            if (!_storage) return ! 1;
            var i, index = [];
            for (i in _storage) _storage.hasOwnProperty(i) && "__simpleStorage_meta" != i && index.push(i);
            return index
        },
        storageSize: function() {
            return _storage_size
        }
    }
});